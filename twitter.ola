contract Twitter {

    /*********/
    //GLOBAL DATA
    /*********/

    //Address to Users
    mapping(address => User) users;

    /*********/
    //USER DATA
    /*********/

    struct User {
        string name;
        bool registered;
        structAddress[] following;
        structAddress[] followers;
        Post[] posts;
    }

    struct Post {
        string text;
    }

    struct structAddress {
        address addr;
    }

    /*********/
    //USER FUNCTIONS
    /*********/

    //Register a user to the platform
    fn registerUser(string name_) {
        address msgSender = caller_address();
        User storage newUser = users[msgSender];
        assert(newUser.registered == false);

        //Initialize
        newUser.name = name_;
        newUser.registered = true;
    }

    //Get a user's name from their address
    fn getUserName(address address_) -> (string) {
        return(users[address_].name);
    }

    //Change a user's name
    fn changeName(string name_) {
        address msgSender = caller_address();
        User storage sender = users[msgSender];
        sender.name = name_;
    }

     fn follow(address otherAddress) {
        address msgSender = caller_address();
        User storage sender = users[msgSender];
        User storage otherUser = users[otherAddress];
        //sender is now following otherAddress
        sender.following.push(structAddress({addr: otherAddress}));
        //otherUser is now followed by msgSender
        otherUser.followers.push(structAddress({addr: msgSender}));
    }

    /*********/
    //POST DATA
    /*********/

    fn post(string text_) {
        address msgSender = caller_address();
        User storage sender = users[msgSender];
        sender.posts.push(Post({text: text_}));
    }

    fn getLatestPost(address address_) -> (string) {
        User storage poster = users[address_];
        u32 latestPostIndex = poster.posts.length - 1;
        return poster.posts[latestPostIndex].text;
    }

    fn getNewsfeed() {
        address msgSender = caller_address();
        User storage sender = users[msgSender];

        for (u32 i = 0; i < sender.following.length; i++) {
            print(getLatestPost(sender.following[i].addr));
        }
    }
}